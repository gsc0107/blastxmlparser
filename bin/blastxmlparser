#!/usr/bin/env ruby
#
# BioRuby bio-blastxmlparser Plugin
# Author:: Pjotr Prins
# License:: MIT License
#
# Copyright (C) 2010-2014 Pjotr Prins <pjotr.prins@thebird.nl>

rootpath = File.dirname(File.dirname(__FILE__))
$: << File.join(rootpath,'lib')

BLASTXML_VERSION = File.new(File.join(rootpath,'VERSION')).read.chomp

$stderr.print "BLAST XML Parser "+BLASTXML_VERSION+" Copyright (C) 2014 Pjotr Prins <pjotr.prins@thebird.nl>\n\n"

USAGE = <<EOM

  blastxmlparser filename(s)

    Use --help switch for more information

EOM

if ARGV.size == 0
  print USAGE
  exit 1
end

require 'bio-blastxmlparser'
require 'optparse'
require 'ostruct'

require 'bio-logger'
Bio::Log::CLI.logger('stderr')
Bio::Log::CLI.trace('info')

options = OpenStruct.new()

opts = OptionParser.new do |o|

  o.on_tail("-h", "--help", "Show help and examples") {
    print(opts)
    print USAGE
    exit()
  }

  o.banner = "== Usage\n  #{File.basename($0)} [options] file(s)"

  o.separator ""

  o.on("-p name", "--parser name", "Use full|split parser (default full)") do |p|
    options.parser = p.to_sym
  end
  
  o.on("-e filter","--exec filter",String, "Evaluate filter") do |s|
    options.exec = s
  end

  o.separator ""

  o.on("-n fields","--named fields",String, "Print named fields") do |s|
    options.fields = s.split(/,/)
  end
   o.on("--output-fasta","Output FASTA") do |b|
    options.output_fasta = true
  end
  
  o.on("-t erb","--template erb",String, "Use ERB template for output") do |s|
    options.template = s
  end
  
  o.separator ""

  o.on("--logger filename",String,"Log to file (default stderr)") do | name |
    Bio::Log::CLI.logger(name)
  end
 
  o.on("--trace options",String,"Set log level (default INFO, see bio-logger)") do | s |
    Bio::Log::CLI.trace(s)
  end
  
  o.on("-q", "--quiet", "Run quietly") do |q|
    Bio::Log::CLI.trace('error')
  end
  
  o.on("-v", "--verbose", "Run verbosely") do |v|
    Bio::Log::CLI.trace('info')
  end
  
  o.on("--debug", "Show debug messages") do |v|
    Bio::Log::CLI.trace('debug')
  end

end

begin
  opts.parse!(ARGV)

  Bio::Log::CLI.configure('bio-blastxmlparser')
  logger = Bio::Log::LoggerPlus['bio-blastxmlparser']

  ARGV.each do | fn |
    logger.info("XML parsing #{fn}")
    n = if options.parser == :split
      Bio::BlastXMLParser::XmlSplitterIterator.new(fn).to_enum
    else
      Bio::BlastXMLParser::XmlIterator.new(fn).to_enum
    end
    i = 1
    n.each do | iter |
      iter.each do | hit |
        hit.each do | hsp |
          do_print = if options.exec
                       eval(options.exec)
                     else
                       true
                     end
          if do_print
            if options.output_fasta
              print ">"+hit.accession+' '+iter.iter_num.to_s+'|'+iter.query_id+' '+hit.hit_id+' '+hit.hit_def+"\n"
              print hsp.qseq+"\n"
            else
              if options.fields
                print i,"\t"
                options.fields.each do | f |
                  print eval(f),"\t"
                end
                print "\n"
                else
                  print [i,iter.iter_num,iter.query_id,hit.hit_id,hsp.hsp_num,hsp.evalue].join("\t"),"\n" 
              end
            end
            i += 1
          end
        end
      end
    end
  end
rescue OptionParser::InvalidOption => e
  opts[:invalid_argument] = e.message
end
